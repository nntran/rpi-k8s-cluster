---
# Pull all images for offline install
- name: Pull all images for offline install
  command: kubeadm config images pull

# - name: Generate a token before init
#   command: kubeadm token generate
#   register: init_token

- name: Check that the {{ kubeadm_init_file }} exists
  stat:
    path: /etc/kubernetes/{{ kubeadm_init_file }}
  register: file

- name: Init the cluster with kubeadm
  #command: kubeadm init --token {{ init_token }} --apiserver-advertise-address={{ node_ip }} {{ cni_init_extra[cni] }} --ignore-preflight-errors=Mem
  command: kubeadm init --apiserver-advertise-address={{ node_ip }} {{ cni_init_extra[cni] }} --control-plane-endpoint {{ node_ip }}:{{ control_plane_port }} --node-name {{ primary_master_node_name }} --upload-certs --ignore-preflight-errors=Mem
  args:
    creates: /etc/kubernetes/{{ init_file }}
  register: init_cmd_out
  # run_once: true
  # ignore_errors: yes
  #when: not file.stat.exists
  notify: kubelet status

- debug: var=init_cmd_out

- name: Set init command fact
  set_fact:
    init_cmd: "{{ init_cmd_out.stdout }}"

- name: Ensure the .kube dir exists for root
  file:
    path: /root/.kube
    state: directory
    owner: root
    group: root

- name: Copy in the kubernetes config to the root user
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes
    owner: root
    group: root

- name: Ensure the .kube dir exists for the {{ ansible_ssh_user }} user
  file:
    path: /home/{{ ansible_ssh_user }}/.kube
    state: directory
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"

- name: Copy in the kubernetes config to the {{ ansible_ssh_user }} user
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ ansible_ssh_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"

- name: Install {{ cni }} CNI
  include_tasks: "cni/{{ cni }}.yml"
  when: cni is defined and cni != ''
