---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-config
data:
  traefik.yaml: |
    ## traefik.yaml
    global:
      checkNewVersion: false
      sendAnonymousUsage: false

    # API and dashboard configuration
    # https://docs.traefik.io/operations/api/
    api:
      insecure: true
      debug: true
      dashboard: true
      # You can now access the dashboard on the port 8080 of the Traefik instance,
      # at the following URL: http://<Traefik IP>:8080/dashboard/
      # or at the following URL: http://traefik.dev.lan/dashboard/ (trailing slash is mandatory).
      # The API serve at http://traefik.dev.lan/api/http/routers

    serversTransport:
      insecureSkipVerify: true

    # Enable ping
    ping: {}

    # Routing and load balancing
    # https://docs.traefik.io/routing/entrypoints/
    entryPoints:
      http:
        address: ":80"
        forwardedHeaders:
          insecure: true

      https:
        address: ":443"
        forwardedHeaders:
          insecure: true

      metrics:
        address: ":8082"

    providers:
      # https://doc.traefik.io/traefik/providers/kubernetes-crd/
      # kubernetesCRD:
      # https://doc.traefik.io/traefik/providers/kubernetes-ingress/
      kubernetesIngress:
        # When deployed into Kubernetes, Traefik reads the environment
        # variables KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT or KUBECONFIG to construct the endpoint.
        # endpoint: "http://localhost:8080"

        # The access token is looked up in /var/run/secrets/kubernetes.io/serviceaccount/token
        # and the SSL CA certificate in /var/run/secrets/kubernetes.io/serviceaccount/ca.crt.
        # They are both provided automatically as mounts in the pod where Traefik is deployed.
        # token: "mytoken"

        # Path to the certificate authority file. Used for the Kubernetes client configuration.
        # certAuthFilePath: "/my/ca.crt"

        # Whether to disable PassHost Headers.
        # Optional, Default=false
        # disablePassHostHeaders: false

        # Array of namespaces to watch.
        # Optional, Default: all namespaces (empty array)
        # namespaces:
        #     - "default"
        #     - "production"

        # By default, Traefik processes all Ingress objects in the configured namespaces.
        # A label selector can be defined to filter on specific Ingress objects only.
        # @see https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        # Optional,Default: empty (process all Ingresses)
        # labelselector: "A and not B"

        # Value of kubernetes.io/ingress.class annotation that identifies Ingress objects to be processed.
        # If the parameter is non-empty, only Ingresses containing an annotation with the same value are processed.
        # Otherwise, Ingresses missing the annotation, having an empty value, or with the value traefik are processed.
        # Optional, Default: empty
        # ingressClass: "traefik-internal"

        # Hostname used for Kubernetes Ingress endpoints.
        # Optional, Default: empty
        # ingressEndpoint:
        #     hostname: "example.net"
        # # Or IP used for Kubernetes Ingress endpoints
        #     ip: "1.2.3.4"
        # # Published Kubernetes Service to copy status from. Format: namespace/servicename.
        #     publishedService: "namespace/foo-service"

        # Optional, Default: 0 (no throttling)
        throttleDuration: "0"
        # throttleDuration: "10s"

    # https://docs.traefik.io/https/tls/
    # tls:
    #   stores:
    #     # Default Certificate
    #     # Traefik can use a default certificate for connections without a SNI, or without a matching domain.
    #     # This default certifIicate should be defined in a TLS store:
    #     default:
    #       defaultCertificate:
    #         certFile: /etc/traefik/certs/wildcard.crt
    #         keyFile: /etc/traefik/certs/wildcard.key

    #   # The TLS options allow one to configure some parameters of the TLS connection.
    #   options:
    #     default:
    #       minVersion: VersionTLS12
    #       # Strict SNI checking
    #       # With strict SNI checking, Traefik won't allow connections from clients connections that do not specify a server_name extension
    #       sniStrict: true
    #     # mintls13:
    #     #   minVersion: VersionTLS13

    #   # User defined
    #   certificates:
    #     - certFile: /etc/traefik/certs/traefik.cert
    #       keyFile: /etc/traefik/certs/traefik.key
    #     - certFile: /etc/traefik/certs/portainer.cert
    #       keyFile: /etc/traefik/certs/portainer.key

    # Automatic HTTPS with ACME (like Let's Encrypt)
    # https://docs.traefik.io/https/acme/
    certificatesResolvers:
      letsencrypt:
        # Enable ACME (Let's Encrypt): automatic SSL.
        acme:
          # Email address used for registration.
          #
          # Required
          #
          email: your@email.fr

          # File or key used for certificates storage.
          #
          # Required
          #
          storage: /etc/traefik/certs/acme.json

          # CA server to use.
          # Uncomment the line to use Let's Encrypt's staging server,
          # leave commented to go to prod.
          #
          # Optional
          # Default: "https://acme-v02.api.letsencrypt.org/directory"
          #
          # caServer: "https://acme-staging-v02.api.letsencrypt.org/directory"

          # KeyType to use.
          #
          # Optional
          # Default: "RSA4096"
          #
          # Available values : "EC256", "EC384", "RSA2048", "RSA4096", "RSA8192"
          #
          # keyType: RSA4096

          # Use a TLS-ALPN-01 ACME challenge.
          #
          # Optional (but recommended)
          #
          tlsChallenge: {}

          # # Use a HTTP-01 ACME challenge.
          # #
          # # Optional
          # #
          # httpChallenge:
          #   # EntryPoint to use for the HTTP-01 challenges.
          #   #
          #   # Required
          #   #
          #   entryPoint: http
          #   # Use a DNS-01 ACME challenge rather than HTTP-01 challenge.
          #   # Note: mandatory for wildcard certificate generation.
          #   #
          #   # Optional
          #   #
          #   # dnsChallenge:
          #   # DNS provider used.
          #   #
          #   # Required
          #   #
          #   # provider: digitalocean
          #   # By default, the provider will verify the TXT DNS challenge record before letting ACME verify.
          #   # If delayBeforeCheck is greater than zero, this check is delayed for the configured duration in seconds.
          #   # Useful if internal networks block external DNS queries.
          #   #
          #   # Optional
          #   # Default: 0
          #   #
          #   # delayBeforeCheck: 0
          #   # Use following DNS servers to resolve the FQDN authority.
          #   #
          #   # Optional
          #   # Default: empty
          #   #
          #   # resolvers
          #   # - "1.1.1.1:53"
          #   # - "8.8.8.8:53"
          #   # Disable the DNS propagation checks before notifying ACME that the DNS challenge is ready.
          #   #
          #   # NOT RECOMMENDED:
          #   # Increase the risk of reaching Let's Encrypt's rate limits.
          #   #
          #   # Optional
          #   # Default: false
          #   #
          #   # disablePropagationCheck: true

    tracing:
      servicename: traefik
      # https://docs.traefik.io/observability/tracing/zipkin/
      # zipkin: # --tracing.zipkin=true
      #   # Zipkin HTTP endpoint used to send data
      #   httpEndpoint: http://zipkin:9411/api/v2/spans
      # # Use Zipkin SameSpan RPC style traces (default = false)
      # sameSpan: true
      # # Use Zipkin 128 bit trace IDs (deffault = true)
      # id128Bit: false
      # # The rate between 0.0 and 1.0 of requests to trace (default = 0.1)
      # sampleRate: 0.2

      # https://docs.traefik.io/observability/tracing/jaeger/
      jaeger: # --tracing.jaeger=true
        # Sampling Server URL is the address of jaeger-agent's HTTP sampling server.
        # samplingServerURL: "http://jaeger-agent:5778/sampling"
        # All-in-one (no agent)
        samplingServerURL: "http://jaeger.monitoring.svc:5778/sampling"
        # Local Agent Host Port instructs reporter to send spans to jaeger-agent at this address.
        # localAgentHostPort: "jaeger-agent:6831"
        # All-in-one (no agent)
        localAgentHostPort: "jaeger.monitoring.svc:6831"
        # Sampling Type specifies the type of the sampler: const, probabilistic, rateLimiting.
        samplingType: const
        # Sampling Param is a value passed to the sampler.
        # Valid values for Param field are:
        #   for const sampler, 0 or 1 for always false/true respectively
        #   for probabilistic sampler, a probability between 0 and 1
        #   for rateLimiting sampler, the number of spans per second
        samplingParam: 1
        # Set the propagation header type. This can be either:
        #   - jaeger, jaeger's default trace header
        #   - b3, compatible with OpenZipkin
        propagation: jaeger
        # Trace Context Header Name is the http header name used to propagate tracing context.
        # This must be in lower-case to avoid mismatches when decoding incoming headers.
        traceContextHeaderName: trace-id

    metrics:
      # https://docs.traefik.io/observability/metrics/prometheus/
      # CLI : --metrics.prometheus=true
      prometheus:
        # Enable metrics on entry points.
        addEntryPointsLabels: true

        # Enable metrics on services.
        addServicesLabels: true

        # Buckets for latency metrics (deffault: 0.100000, 0.300000, 1.200000, 5.000000")
        buckets:
          - 0.1
          - 0.3
          - 1.2
          - 5.0

    # https://docs.traefik.io/observability/logs/
    log:
      level: INFO
      filePath: "/var/log/traefik.log"
      format: json

    accessLog: {}
    # Configuring Multiple Filters
    #   filePath: "/var/log/traefik_access.log"
    #   format: json
    #   filters:
    #     statusCodes:
    #       - "200"
    #       - "300-302"
    #     retryAttempts: true
    #     minDuration: "10ms"
